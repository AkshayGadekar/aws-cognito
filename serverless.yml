# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: akshaygadekar
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: cognito
# "service" is the name of this project. This will also be added to your AWS resource names.
service: cognito

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  httpApi:
    cors: true
  environment:
    REGION: 'ap-south-1'
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
    S3_BUCKET_NAME: !Ref ProfilePicturesBucket
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        - !Sub arn:aws:s3:::${ProfilePicturesBucket}/*
  # Uncomment to easily set up a custom domain. Read the docs for more details:
  # https://www.serverless.com/framework/docs/providers/aws/guide/domains
  # domain: api.example.com

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: myUserPool
        # AliasAttributes:
        #   - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: phone_number
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: gender
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: updated_at
            AttributeDataType: Number
            Required: false
            Mutable: true
          - Name: zoneinfo
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: birthdate
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: picture
            AttributeDataType: String
            Required: false
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: myUserPoolClient
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        RefreshTokenValidity: 30
        AccessTokenValidity: 24
        IdTokenValidity: 24
        TokenValidityUnits:
          RefreshToken: days
          AccessToken: hours
          IdToken: hours
        SupportedIdentityProviders:
          - COGNITO
        PreventUserExistenceErrors: ENABLED
    ProfilePicturesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: profile-pictures-bucket-${self:provider.region}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: DeleteIncompleteMultipartUploads
              Status: Enabled
              AbortIncompleteMultipartUpload:
                DaysAfterInitiation: 1
            - Id: DeleteOldVersions
              Status: Enabled
              NoncurrentVersionExpirationInDays: 30



functions:
  signUp:
    handler: src/signUp.signUp
    events:
      - httpApi:
          path: /signup
          method: post
  confirmSignUp:
    handler: src/signUp.confirmSignUp
    events:
      - httpApi:
          path: /confirm-signup
          method: post
  signIn:
    handler: src/signIn.signIn
    events:
      - httpApi:
          path: /signin
          method: post
  signOut:
    handler: src/signOut.signOut
    events:
      - httpApi:
          path: /signout
          method: get
  forgotPassword:
    handler: src/forgotPassword.forgotPassword
    events:
      - httpApi:
          path: /forgot-password
          method: post
  confirmForgotPassword:
    handler: src/forgotPassword.confirmForgotPassword
    events:
      - httpApi:
          path: /confirm-forgot-password
          method: post
  userInfo:
    handler: src/userInfo.userInfo
    events:
      - httpApi:
          path: /user-info
          method: get
  updateUser:
    handler: src/userInfo.updateUser
    events:
      - httpApi:
          path: /update-user
          method: patch
  generatePresignedUrl:
    handler: src/userInfo.generatePresignedUrl
    events:
      - httpApi:
          path: /generate-presigned-url
          method: post
  getPresignedPictureUrl:
    handler: src/userInfo.getPresignedPictureUrl
    events:
      - httpApi:
          path: /get-presigned-picture-url
          method: post
  deleteUser:
    handler: src/userInfo.deleteUser
    events:
      - httpApi:
          path: /delete-user
          method: delete
  
